import sqlite3 as sqlite
from config import DATABASE
from random import choice

async def start():

    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Rooms(
    room_id TEXT PRIMARY KEY,
    name TEXT,
    member_count INTEGER,
    admin TEXT,
    desc TEXT, 
    members TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Members(
    member_id TEXT PRIMARY KEY,
    name TEXT,
    sex TEXT,
    age INTEGER, 
    desc TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Addictions(
    member_1 TEXT, 
    member_2 TEXT,
    room TEXT
    )
    ''')

    db.commit()
    db.close()


async def create_profile(user_id):
    '''
    –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–±–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ, –µ–≥–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å,
    —á—Ç–æ–±—ã –Ω–µ –∞–ø–¥–µ–π—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    '''
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    sql = cursor.execute('SELECT * FROM members WHERE member_id = :user_id', {'user_id': user_id}).fetchone()

    if not sql:
        cursor.execute('INSERT INTO members VALUES (?, ?, ?, ?, ?, ?)', (user_id, '', '', '', 0, ''))
        db.commit()

    db.close()


async def update_profile(user_id, state):
    '''
    –ó–∞–±–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
    '''
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    async with state.proxy() as data:
        cursor.execute('UPDATE members SET name = ?, surname = ?, sex = ?, age = ?, desc = ? WHERE member_id = ?',
                       (data['name'], data['surname'], data['sex'], data['age'], data['desc'], user_id))
        db.commit()

    db.close()


async def show_profile(user_id):
    '''
    –° –ø–æ–º–æ—â—å—é dict(zip()) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –∫–ª—é—á–µ–π (–∏–º–∏ –±—É–¥—É—Ç –ø–æ–ª—è –ë–î)
    –∏ –∑–Ω–∞—á–µ–Ω–∏–π - –∏–º–∏ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ SELECT
    '''
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    result = ['member_id', 'name', 'surname', 'sex', 'age', 'desc'] # —Å–ø–∏—Å–æ–∫ —Å –∫–ª—é—á–∞–º–∏

    sql = cursor.execute('SELECT * FROM members WHERE member_id = :user_id', {'user_id': user_id}).fetchone()

    if not sql: # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç None
        return None

    db.commit()
    db.close()

    profile = dict(zip(result, sql)) # —Ç–µ–ø–µ—Ä—å —Å –ø–æ–º–æ—â—å—é zip –æ–±—ä–µ–¥–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –∫–ª—é—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
    # –∏–∏–∏–∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ª–æ–≤–∞—Ä—é —Ñ—É–Ω–∫—Ü–∏–µ–π dict

    return profile

async def create_room(state, user_id):
    '''
    –°–æ–∑–¥–∞–¥–∏–º –∫–æ–º–Ω–∞—Ç—É —Å –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    –£–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤—ã—Å—Ç—É–ø–∏—Ç –Ω–∞–±–æ—Ä –∏–∑ 5 —Ü–∏—Ñ—Ä, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ –∏ random.choice()
    –ü–æ —ç—Ç–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    —Ñ–ª–æ—É: 1. –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª -> 2. –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID -> 3. –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å —Ç–∞–∫–∏–º ID ->
    -> 4. –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É 2, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º
    –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    '''
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    while True: # –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª (1)

        nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ü–∏—Ñ–µ—Ä–æ–∫ (—è –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏)(2)
        room_id = '' # –±—É–¥—É—â–∏–π ID –∫–æ–º–Ω–∞—Ç—ã (–ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ–π, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π)(2)

        for i in range(5):
            room_id += choice(nums) # –ø—è—Ç—å —Ä–∞–∑ –±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–∏—Ñ–µ—Ä–æ–∫ –∏ –≤—É–∞–ª—è! –ø–æ–ª—É—á–∞–µ–º ID(2)

        sql = cursor.execute('SELECT * FROM Rooms WHERE room_id = :room_id',
                             {'room_id': room_id}).fetchone() # –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–Ω–∞—Ç—ã(3)

        if not sql: # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º(4)
            async with state.proxy() as data:
                cursor.execute('INSERT INTO Rooms VALUES (?, ?, ?, ?, ?, ?)',
                               (room_id, data['room_name'], data['member_count'], user_id, data['room_desc'], user_id))
            db.commit() # –°–û–•–†–ê–ù–Ø–ï–ú!!!! –°–£–ö–ê –ß–ê–° –ù–ï –ú–û–ì –ü–û–ù–Ø–¢–¨ –ü–û–ß–ï–ú–£ –ù–ï –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø!!!!!!!!!
            return room_id
        else:
            continue
    db.close()
# –ï–ë–£–ß–ò–ô db.commit()!!! –£–• –ù–ê–ú–£–ß–ò–õ–°–Ø


async def join_room(room_id, user_id):
    '''
    –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ—É –æ –∫–æ–º–Ω–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é UPDATE
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é SELECT -> 2. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID ->
    -> 3. –ß–µ—Ä–µ–∑ UPDATE –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —è—á–µ–π–∫—É –∫–æ–º–Ω–∞—Ç—ã –í –Ω–µ–π –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ID –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
    '''
    result = ['room_id', 'room_name', 'member_count', 'admin', 'desc', 'members']

    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    sql = cursor.execute('SELECT * FROM Rooms where room_id = :room_id', {'room_id': room_id}).fetchone()

    if not sql:
        db.close()
        return None

    room = dict(zip(result, sql))

    if str(user_id) in room['members']:
        db.close()
        return True
    else:
        new_member = room['members'] + f' {str(user_id)}'
        cursor.execute('UPDATE Rooms SET members = :new_member WHERE room_id = :room_id',
                       {'new_member': new_member, 'room_id': room_id})
        db.commit()

    db.close()

    return room

async def show_rooms_list(user_id):
    rooms_list = []
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    sql = cursor.execute('SELECT name, admin, member_count, room_id, desc FROM Rooms WHERE instr (members, :user_id)',
                         {'user_id': user_id}).fetchall()

    db.close()

    for i in sql:
        if i[1] == str(user_id):
            rooms_list.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} üëë\n0/{i[2]} —á–µ–ª–æ–≤–µ–∫ —É—á–∞—Å—Ç–≤—É—é—Ç\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[4]}\n–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {i[3]}')
        else:
            rooms_list.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \n0/{i[2]} —á–µ–ª–æ–≤–µ–∫ —É—á–∞—Å—Ç–≤—É—é—Ç\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[4]}\n–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {i[3]}')

    return rooms_list


async def delete_room(room_id):
    '''
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ id
    '''
    db = sqlite.connect(DATABASE)
    cursor = db.cursor()

    sql = cursor.execute('SELECT * FROM Rooms WHERE room_id = :room_id', {'room_id': room_id}).fetchone()

    if sql:
        cursor.execute('DELETE FROM Rooms WHERE room_id = :room_id', {'room_id': room_id})

    db.commit()
    db.close()

