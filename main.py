import database
from config import TOKEN
from states import *
from keyboards import *
from aiogram import Bot, executor, Dispatcher, types
from aiogram.utils.exceptions import BadRequest
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from magic_filter import F


greetings_message = '''–ü—Ä–∏–≤–µ—Ç!\n
–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ <i>–¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É</i>üéÖ 
–í—Å–µ –∫–Ω–æ–ø–∫–∏ —É —Ç–µ–±—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –ø–∏—Å–∞—Ç—å –Ω–∏—á–µ–≥–æ <b>–Ω–µ –Ω–∞–¥–æ!</b> ‚ö†\n
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—é –æ —Å–µ–±–µ üìã"</b>\n
–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏ <b>"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"</b>'''


storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot=bot,
                storage=storage)


async def on_startup(_):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    '''
    await database.start()


@dp.message_handler(commands='start')
async def start_cmd(message: types.Message):
    await message.answer(text=greetings_message,
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=command_kb)


@dp.message_handler(text='C—Ç–æ–ø ‚ùå', state='*')
async def stop_cmd(message: types.Message, state: FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–æ–ø", —Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    '''
    current_state = await state.get_state()
    if current_state is None: # –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–∫–≤–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        return # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    else: # –∏–Ω–∞—á–µ –∫–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏ –∏ —Ñ–∏–Ω–∏—à–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚ö†',
                             reply_markup=command_kb)
        await state.finish()


@dp.message_handler(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—é –æ —Å–µ–±–µ üìã')
async def create_profile(message: types.Message):
    '''
    –° —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    '''
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—å!\n'
                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å—Ç–æ–ø ‚ùå"\n'
                              '–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?',
                         reply_markup=male_female_keyboard)
    await database.create_profile(message.from_user.id) # —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º (—Å–º. database)
    await Profile.sex.set()


@dp.message_handler(F.text.in_({'‚ôÇ', '‚ôÄ'}),
                    state=Profile.sex)
async def  sex_cmd(message: types.Message, state: FSMContext):
    '''
    –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    async with state.proxy() as data: # –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        if message.text == '‚ôÇ':
            data['sex'] = '–ú' # –µ—Å–ª–∏ –º—É–∂—Å–∫–æ–π –ø–æ–ª - –ú
        else:
            data['sex'] = '–ñ' # –µ—Å–ª–∏ –∂–µ–Ω—Å–∫–∏–π - –ñ
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è!',
                         reply_markup=stop_keyboard)
    await Profile.next()


@dp.message_handler(F.text.isalpha(),
                    state=Profile.name)
async def name_cmd(message: types.Message, state: FSMContext):
    '''
    –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π isalpha()
    '''
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer(text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é!',
                         reply_markup=stop_keyboard)
    await Profile.next()


@dp.message_handler(F.text.isalpha() == False,
                    state=Profile.name)
async def name_error(message: types.Message):
    '''
    –º–µ—Ç–æ–¥ isalpha –¥–µ–ª–∞–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –∑–∞ –Ω–∞—Å,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤
    –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã
    –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –¥–µ–≤—É—à–µ–∫, —á—Ç–æ —Ö–æ—Ç—è—Ç —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å :(
    '''
    await message.answer('–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ‚ö†')


@dp.message_handler(F.text.isalpha(),
                    state=Profile.surname)
async def surname_cmd(message: types.Message, state: FSMContext):
    '''
    –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π isalpha()
    '''
    async with state.proxy() as data:
        data['surname'] = message.text

    await message.answer(text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!',
                         reply_markup=stop_keyboard)
    await Profile.next()


@dp.message_handler(F.text.isalpha() == False,
                    state=Profile.surname)
async def surname_error(message: types.Message):
    '''
    –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ö–µ–Ω–¥–ª–µ—Ä—É –≤—ã—à–µ
    '''
    await message.answer('–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ‚ö†')


@dp.message_handler(F.text.isdigit() & (F.text.len() <= 2),
                    state=Profile.age)
async def age_cmd(message: types.Message, state: FSMContext):
    '''
    –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π isdigit()
    '''
    async with state.proxy() as data:
        data['age'] = message.text

    await message.answer(text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ '
                              '(—Ö–æ–±–±–∏, –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º, –≥—Ä—É–ø–ø–∞, –∫–Ω–∏–≥–∞, –¥–∞ –≤–æ–æ–±—â–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ)!')
    await Profile.next()


@dp.message_handler((F.text.isdigit() == False) | (F.text.len() > 2),
                    state=Profile.age)
async def error_age(message: types.Message):
    '''
    –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–µ–Ω—ã –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª—ã,
     –ª–∏–±–æ –æ–Ω –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –¥–ª–∏–Ω–µ,
    —Ç–æ –ø–æ–ø–∞–ø–¥–∞–µ–º —Å—é–¥—ã–º
    '''
    await message.answer(text='–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ <b>–¥–≤—É—Ö —Ü–∏—Ñ—Ä</b> ‚ö†\n'
                              '–£ –Ω–∞—Å, –∫–∞–∫ —É –ª–µ–≥–æ, 99+',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=stop_keyboard)


@dp.message_handler(F.text,
                    state=Profile.desc)
async def desc_cmd(message: types.Message, state: FSMContext):
    '''
    –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –≤ –ë–î
    '''
    async with state.proxy() as data:
        data['desc'] = message.text

    await database.update_profile(message.from_user.id, state)
    await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–º–∏ <b>"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"</b>',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=command_kb)
    await state.finish()


@dp.message_handler(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§')
async def show_profile(message: types.Message):
    '''
    –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –µ—ë –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é database.show_profile()
                                                        ^^^^^^^ c–º. database.py
    –ò —Å—Ä–∞–∑—É —Å—É—ë–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–∑–æ–≤ "–ø—É—Å—Ç–æ–≥–æ" –ø—Ä–æ—Ñ–∏–ª—è
    '''
    profile = await database.show_profile(message.from_user.id)

    if profile is None:
        await message.answer(text='–£–ø—Å! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚òπ\n'
                             '–ú—ã –º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! ‚òùü§ì\n'
                             '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ <b>–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—é –æ —Å–µ–±–µ üìã</b>',
                             parse_mode=types.ParseMode.HTML)
        return

    for value in profile.values():
        if value in ('', 0):
            await message.answer(text='–£–ø—Å! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ ‚òπ\n'
                                      '–ú—ã –º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! ‚òùü§ì\n'
                                      '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ <b>–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—é –æ —Å–µ–±–µ üìã</b>',
                                 parse_mode=types.ParseMode.HTML)
            return

    await message.answer(text=f"{profile['name']} {profile['surname']}, –ø–æ–ª: {profile['sex']}\n"
                              f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
                              f"{profile['desc']}")


@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üö™')
async def create_room(message: types.Message):
    '''
    –•—ç–Ω–¥–ª–µ—Ä, –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    '''
    await message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã')
    await Room.name.set()


@dp.message_handler(F.text, state=Room.name)
async def name_room(message: types.Message, state: FSMContext):
    '''
    —Ç—É—Ç —É–∂–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    '''
    async with state.proxy() as data:
        data['room_name'] = message.text
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–∂–µ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)')
    await Room.next()


@dp.message_handler(F.text.isdigit() & (F.text.len() <= 2),
                    state=Room.member_count)
async def member_count(message: types.Message, state: FSMContext):
    '''
    a —Ç—É—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    '''
    async with state.proxy() as data:
        data['member_count'] = message.text

    await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã!\n'
                         '–≠—Ç–æ —É–≤–∏–¥—è—Ç —Ç–µ, –∫—Ç–æ —Å—é–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è üôã‚Äç‚ôÇÔ∏è')
    await Room.next()


@dp.message_handler(state=Room.desc)
async def room_desc(message: types.Message, state: FSMContext):
    '''
    –î–µ–ª–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    '''
    async with state.proxy() as data:
        data['room_desc'] = message.text

    async with state.proxy() as data:
        data['room_id'] = await database.create_room(state, message.from_user.id)

    await message.answer('–ö—Ä—É—Ç–æ! –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ üéâ\n'
                         f'–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {data["room_id"]}.'
                         f' –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å <b>–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É ‚úÖ</b> –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.\n'
                         f'–ò –≤—Å—ë! –ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ü•≥\n'
                         f'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–Ω–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å, –Ω–∞–∂–º–∏ <b>–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã üë•</b>',
                         parse_mode=types.ParseMode.HTML)
    await state.finish()


@dp.message_handler(text='–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É ‚úÖ')
async def join_room(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ!')
    user_input = message.text
    await Connect.code.set()


@dp.message_handler(state=Connect.code)
async def connect_cmd(message: types.Message, state=FSMContext):

    room = await database.join_room(message.text, message.from_user.id)

    if room is None:
        await message.answer('–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ ‚ö†')

    elif room is True:
        await message.answer('–¢—ã —É–∂–µ –ø–æ–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ')
        await state.finish()

    else:
        await message.answer(f'–¢—ã –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {room["room_name"]}')
        await state.finish()


@dp.message_handler(text='–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã üë•')
async def my_rooms(message: types.Message):

    my_rooms = await database.show_rooms_list(message.from_id)
    await message.answer('–¢—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö üëá')

    for room in my_rooms:
        if 'üëë' in room:
            delete_keyboard = InlineKeyboardMarkup()
            delete_button = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É',
                                                 callback_data=f'delete {room[-5:]}')
            delete_keyboard.add(delete_button)
            await message.answer(text=room,
                                 reply_markup=delete_keyboard)
        else:
            await message.answer(room)


@dp.callback_query_handler(F.data.contains('delete'))
async def delete_room(callback: types.CallbackQuery):
    # await database.delete_room(callback.data[-5:])
    confirm_keyboard = InlineKeyboardMarkup()
    agree_button = InlineKeyboardButton(text='–î–∞',
                                        callback_data=f'confirm_{callback.data[-5:]}')
    disagree_button = InlineKeyboardButton(text='–ù–µ—Ç',
                                        callback_data=f'refuse_{callback.data[-5:]}')
    confirm_keyboard.add(agree_button, disagree_button)
    await bot.answer_callback_query(callback_query_id=callback.id,
                                    text='–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã')
    await callback.message.edit_text(f'{callback.message.text}\n'
                                     f'----------------------------------------------\n'
                                     f'<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É?</b>',
                                     reply_markup=confirm_keyboard,
                                     parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(F.data.contains('confirm'))
async def confirm_delete(callback: types.CallbackQuery):
    await database.delete_room(callback.data[-5:])
    await bot.answer_callback_query(callback_query_id=callback.id,
                                    text='–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
    await callback.message.delete()


@dp.callback_query_handler(F.data.contains('refuse'))
async def refuse_delete(callback: types.CallbackQuery):
    await callback.message.edit_text(callback.message.text[:-93])
    await bot.answer_callback_query(callback_query_id=callback.id,
                                    text='–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    delete_keyboard = InlineKeyboardMarkup()
    delete_button = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É',
                                         callback_data=f'delete {callback.message.text[-5:]}')
    delete_keyboard.add(delete_button)
    await callback.message.edit_text(text=callback.message.text[:-93],
                                     reply_markup=delete_keyboard)
if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
